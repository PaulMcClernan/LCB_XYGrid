/**

Description:
Widget

Name: mouseMove

Type: message

Name: gridMouseMove

Type: message

Name: gridMouseUp

Type: message

Name: mouseDown

Type: message

Name: mouseUp

Type: message

Name: mouseRelease

Type: message

Name: backgroundColor

Type: property

Name: hiliteColor

Type: property

Name: outerShadowColor

Type: property

Name: borderWidth

Type: property

Name: borderColor

Type: property

Name: maxValue

Type: property

*/
widget community.livecode.paulmcclernan.xygrid

-- dependancy declarations
use com.livecode.canvas
use com.livecode.string
use com.livecode.char
use com.livecode.widget
use com.livecode.engine
use com.livecode.library.widgetutils

-- adding metadata to ensure the extension displays correctly in livecode
metadata title is "XYGrid"
metadata author is "Paul McClernan"
metadata version is "0.1"
metadata preferredSize is "256,256"
-- metadata svgicon is "M0,0v69.6c0,1.4,1.1,2.5,2.4,2.5h9.7c0.8,0,1.5-0.4,2-1.1c0.4,0.7,1.1,1.1,2,1.1h9.8c0.8,0,1.5-0.4,1.9-1.1 c0.4,0.6,1.1,1.1,1.9,1.1h9.8c0.8,0,1.5-0.4,1.9-1.1c0.4,0.6,1.1,1.1,1.9,1.1h9.8c0.8,0,1.5-0.4,2-1.1c0.4,0.7,1.1,1.1,2,1.1h9.7 c0.8,0,1.5-0.4,1.9-1.1c0.4,0.6,1.1,1.1,1.9,1.1h9.7c0.8,0,1.5-0.4,1.9-1.1c0.4,0.6,1.1,1.1,1.9,1.1H94c1.3,0,2.4-1.1,2.4-2.5V0H0z M95.4,69.6c0,0.8-0.6,1.5-1.4,1.5h-9.8c-0.8,0-1.4-0.7-1.4-1.5V46.9h2.5c1,0,1.9-0.9,1.9-2V1h8.1L95.4,69.6z M80.4,71.1h-9.7 c-0.8,0-1.4-0.7-1.4-1.5V46.9h2.5c1,0,1.9-0.9,1.9-2V1h3.6v43.9c0,1.1,0.9,2,1.9,2h2.5v22.7C81.8,70.4,81.2,71.1,80.4,71.1z M57,71.1c-0.8,0-1.4-0.7-1.4-1.5V46.9h2.5c1,0,1.9-0.9,1.9-2V1h3.7v43.9c0,1.1,0.9,2,1.9,2h2.5v22.7c0,0.8-0.6,1.5-1.4,1.5 L57,71.1z M53.1,71.1h-9.8c-0.8,0-1.4-0.7-1.4-1.5V1H50v43.9c0,1.1,0.9,2,1.9,2h2.5v22.7C54.5,70.4,53.8,71.1,53.1,71.1z M28.3,69.6V46.9h2.5c1,0,1.9-0.9,1.9-2V1h8.1v68.6c0,0.8-0.6,1.5-1.4,1.5h-9.8C28.9,71.1,28.3,70.4,28.3,69.6z M14.7,69.6V46.9 h2.5c1,0,1.9-0.9,1.9
-- 2V1h3.7v43.6l0,0v0.3c0,1.1,0.9,2,1.9,2h2.5v22.7c0,0.8-0.6,1.5-1.4,1.5H16C15.3,71.1,14.7,70.4,14.7,69.6z M12.1,71.1H2.4c-0.8,0-1.4-0.7-1.4-1.5V1h8.1v43.9c0,1.1,0.9,2,1.9,2h2.5v22.7C13.5,70.4,12.9,71.1,12.1,71.1z"

private variable mCircleColor as Color
-- property foregroundColor get getCircleColor set setCircleColor
property circleColor   get getCircleColor   set setCircleColor
metadata circleColor.editor  is "com.livecode.pi.colorwithalpha"
metadata circleColor.section is "Colors"
metadata circleColor.label   is "Point Marker fill"
private handler setCircleColor(in pColor as String) returns nothing
   put stringToColor(pColor) into mCircleColor
   -- log mCircleColor
   OnGeometryChanged()
   redraw all
end handler
public handler getCircleColor() returns String
   return colorToString(mCircleColor, true)
end handler

private variable mStrokesColor as Color
property strokesColor get getBorderColor set setBorderColor
metadata strokesColor.editor is "com.livecode.pi.colorwithalpha"
metadata strokesColor.section is "Colors"
metadata strokesColor.label   is "Stokes Color"
public handler setBorderColor(in pColor as String) returns nothing
   -- log pColor
   put stringToColor(pColor) into mStrokesColor
   log mStrokesColor
   OnGeometryChanged()
   redraw all
end handler
public handler getBorderColor() returns String
   return colorToString(mStrokesColor, true)
end handler

private variable mBorderWidth as Number
property borderWidth get mBorderWidth  set setBorderWidth
metadata borderWidth.editor is "com.livecode.pi.number"
metadata borderWidth.label is "Border width"
metadata borderWidth.step is "0.5"
metadata borderWidth.default is "0.5"
metadata borderWidth.min is "0.5"
metadata borderWidth.max is "25"
public handler setBorderWidth(in pBorderWidth as Number) returns nothing
   put pBorderWidth into mBorderWidth
   OnGeometryChanged()
   redraw all
end handler

variable mHorizRectList as List
variable mVertRectList as List
private variable mMaxValue as Number
property maxValue get mMaxValue set setMaxValue
metadata maxValue.editor is "com.livecode.pi.number"
public handler setMaxValue(in pMaxValue as Number) returns nothing
   put pMaxValue into mMaxValue
   OnGeometryChanged()
   redraw all
end handler

private variable mCircleSize as Number
property circleSize get mCircleSize set setCircleSize
metadata maxValue.editor is "com.livecode.pi.number"
public handler setCircleSize(in pCircleSize as Number) returns nothing
   put pCircleSize into mCircleSize
   OnGeometryChanged()
   redraw all
end handler
-----------------------------------------------------------------------------------------------  Mouse Handlers --------------------------------------------------------------------------------------
public variable mMouseButtonDown as Boolean

public handler OnMouseUp()
  post "mouseUp" with [the click button] --  to my script object with [the click button]
  post "gridMouseUp" with [mLocalLoc[1] -(mMaxValue/2),(mLocalLoc[2] -(mMaxValue/2)) * -1] --  to my script object with [the click button]
end handler

public handler OnMouseDown()
   post "mouseDown" with [the click button] --- to my script object with [the click button]
end handler

variable mLocalLoc as List
public handler OnMouseMove()
   variable tPosition as Point
   put the mouse position into tPosition
   variable tRectList as List
   variable tRectNum as Number
   variable tHoriz as optional Number
   variable tVert as optional Number
   variable tRect
   put my bounds into tRect
   -- put getRectListSplitHorz(tRect,256) into tRectList
   --- tRectList now contains 8 rect elements
   repeat with tRectNum from 1 up to mMaxValue
      put mHorizRectList[tRectNum] into tRect
      if tPosition is within tRect then
         put tRectNum into tHoriz
         exit repeat
      end if
      -- stroke rectangle path of tRect on this canvas
   end repeat
   if tHoriz is not nothing then
      put tHoriz into mLocalLoc[1]
   end if
   put my bounds into tRect
   -- put getRectListSplitVert(tRect,256) into tRectList
   --- tRectList now contains 8 rect elements
   repeat with tRectNum from 1 up to mMaxValue
      put mVertRectList[tRectNum] into tRect
      if tPosition is within tRect then
         put tRectNum into tVert
         exit repeat
      end if
      -- stroke rectangle path of tRect on this canvas
   end repeat
   if tVert is not nothing then
      put tVert into mLocalLoc[2]
   end if
   redraw all
   post "mouseMove" with [the x of tPosition, the y of tPosition]
   post "gridMouseMove" with [mLocalLoc[1] -(mMaxValue/2),(mLocalLoc[2] -(mMaxValue/2)) * -1]
   -- put [tHoriz,tVert] into mLocalLoc
end handler

public handler OnMouseCancel()
   -- put false into mPianoMouseButtonDown
   OnMouseUp()
end handler
--public handler OnMouseCancelHover()
--   put false into mMouseButtonDown
--   OnMouseUp()
--end handler
--public handler OnMouseEnter()
   --variable tMouseButtonState as String
   --execute script "global gPianoMouseButtonDown ; return gPianoMouseButtonDown"
   --execute script "return mouse()"
   -- log the result
   --if the result is "up" then
      --put false into mMouseButtonDown
       -- OnMouseUp()
   --else
       --put true into mMouseButtonDown
       -- OnMouseDown()
   --end if
--end handler

public handler OnMouseScroll(deltaX, deltaY)
   --> deltaX is the horizontal scroll
   --> deltaY is the vertical scroll
   --> deltaX and deltaY are -1 or 1 (or 0)
   --> on a mouse with vertical scroll only the
   --> horizontal scroll is triggered with Shift
  log [deltaX, deltaY]
end handler

-----------------------------------------------------------------------------------------------  Creating & Drawing --------------------------------------------------------------------------------------
public handler OnSave(out rProperties as Array)
   put mBorderWidth into rProperties["borderWidth"]
   put colorToString(mStrokesColor, false) into rProperties["strokesColor"]
   put colorToString(mCircleColor, false) into rProperties["circleColor"]
   -- put colorToString(mHiliteColor, true) into rProperties["hiliteColor"]
end handler
-- this handler is called when the widget is loaded
public handler OnLoad(in pProperties as Array)
   -- log [pProperties] --> logging this doesn't seem to work! -- moreover, it silently fails making debugging difficult
   put pProperties["borderWidth"] into mBorderWidth
   put stringToColor(pProperties["strokesColor"]) into mStrokesColor
   put stringToColor(pProperties["circleColor"]) into mCircleColor
   -- OnGeometryChanged()
   redraw all
end handler

public handler OnStopEditing()
   OnGeometryChanged()
   redraw all
end handler

public handler OnCreate()
   variable tRect
   put [128,128] into mLocalLoc
   put 256 into mMaxValue
   put getRectListSplitHorz(my bounds,mMaxValue) into mHorizRectList
   put getRectListSplitVert(my bounds,mMaxValue) into mVertRectList
   put (the width of (element 1 of mHorizRectList) * 10 ) into mCircleSize
   put 0.5 into mBorderWidth
   put the color of my foreground paint into mCircleColor
   put the color of my border paint into mStrokesColor
end handler

public handler OnGeometryChanged()
   variable tRect
   put my bounds into tRect
   put getRectListSplitHorz(tRect,mMaxValue) into mHorizRectList
   put getRectListSplitVert(tRect,mMaxValue) into mVertRectList
   redraw all
end handler
--------------------------------------------------------------------------------------------------------------
-- called whenever LiveCode needs to redraw the widget
public handler OnPaint()
   variable tRect
   -- variable tRectList as List
   variable tHoriz as optional Number
   variable tVert as optional Number
   variable tPath
   set the stroke width of this canvas to mBorderWidth
   set the paint of this canvas to solid paint with mStrokesColor
   -- log mStrokesColor
   put line path from point [my width / 2, 0] to point [my width / 2,my height] into tPath
   stroke tPath on this canvas
   put line path from point [0,my height / 2] to point [my width,my height/2] into tPath
   stroke tPath on this canvas
   if mLocalLoc is not nothing then
      put (element 1 of mLocalLoc * ( my width / mMaxValue )) into tHoriz
      put (element 2 of mLocalLoc * ( my height / mMaxValue )) into tVert
      set the paint of this canvas to solid paint with mCircleColor
      put circle path centered at point [tHoriz,tVert] with radius mCircleSize into tPath
      -- log mCircleColor
      fill tPath on this canvas
      set the paint of this canvas to solid paint with mStrokesColor
      stroke tPath on this canvas
   end if
   set the paint of this canvas to solid paint with mStrokesColor
   set the stroke width of this canvas to (mBorderWidth * 2)
   put my bounds into tRect
   stroke rectangle path of tRect on this canvas
end handler

-- this handler is called when a card containg the widget is opened
public handler OnOpen()
   OnGeometryChanged()
   redraw all
end handler

public handler getRectListSplitHorz(in pRect, in pDiv as Integer) returns List
   variable tWidth as Integer
   variable tHeight as Integer
   variable tLeft as Integer
   variable tTop as Integer
   variable tRect
   variable tRectList as List
   variable tSplitWidth as Integer
   variable tCounter as Integer
   if pDiv < 2 then
      put 2 into pDiv
   end if
   put the top of pRect into tTop
   put the left of pRect into tLeft
   put the bottom of pRect into tHeight
   put the right of pRect into tWidth
   put tWidth/pDiv into tSplitWidth
   put rectangle [tLeft,tTop,tSplitWidth,tHeight] into tRect
   push tRect onto tRectList
   repeat with tCounter from 1 up to pDiv -1
      put rectangle [tLeft+(tSplitWidth*tCounter),tTop,(tSplitWidth*tCounter)+tSplitWidth,tHeight] into tRect
      push tRect onto tRectList
   end repeat
   return tRectList
end handler

public handler getRectListSplitVert(in pRect, in pDiv as Integer) returns List
   variable tWidth as Integer
   variable tHeight as Integer
   variable tLeft as Integer
   variable tTop as Integer
   variable tRect
   variable tRectList as List
   variable tSplitHeight as Integer
   variable tCounter as Integer
   if pDiv < 2 then
      put 2 into pDiv
   end if
   put the top of pRect into tTop
   put the left of pRect into tLeft
   put the bottom of pRect into tHeight
   put the right of pRect into tWidth
   put tHeight/pDiv into tSplitHeight
   put rectangle [tLeft,tTop,tWidth,tSplitHeight] into tRect
   push tRect onto tRectList
   repeat with tCounter from 1 up to pDiv -1
      put rectangle [tLeft,tTop+(tSplitHeight*tCounter),tWidth,(tSplitHeight*tCounter)+tSplitHeight] into tRect
      push tRect onto tRectList
   end repeat
   return tRectList
end handler


end widget
